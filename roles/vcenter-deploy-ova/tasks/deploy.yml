---

- name: gather information about vms and templates
  vmware_vm_facts:
    hostname: "{{ lookup('env', 'VMWARE_HOST') }}"
    username: "{{ lookup('env', 'VMWARE_USER') }}"
    password: "{{ lookup('env', 'VMWARE_PASSWORD') }}"
    validate_certs: no
  delegate_to: localhost
  register: vm_facts

- debug:
    var: vm_facts.virtual_machines

- debug:
    msg: "{{ item }} found"
  loop: "{{ vm_facts.virtual_machines }}"
  when: "'windows' in item"

- name: deploy ovas
  command: >
    {{ ovftool }}
    --acceptAllEulas
    --noSSLVerify
    --X:injectOvfEnv
    --allowExtraConfig
    --X:connectionFileTransferRetryCount=3
    --sourceType=OVA
    --net:"nat"='{{ target_esx_portgroup }}'
    --datastore='{{ target_esx_datastore }}'
    --diskMode='{{ disk_mode }}'
    --name="{{ item | replace('.ova','') | replace('-ovf','') }}"
    '{{ network_mount_dir }}/{{ ova_path}}/{{ item }}'
    vi://"{{ ansible_user | default(ansible_ssh_user) | default('root') | urlencode }}":"{{ ansible_password | default(ansible_ssh_password) | urlencode }}"@{{ ansible_host }}/
  loop: "{{ ova_files }}"
  when:
    - ova_files is defined
    - item != vm_facts.virtual_machines

#- name: deploy ovas
#  command: >
#    {{ ovftool }}
#    --acceptAllEulas
#    --noSSLVerify
#    --X:injectOvfEnv
#    --allowExtraConfig
#    --X:connectionFileTransferRetryCount=3
#    --sourceType=OVA
#    --net:"Network 1"='{{ target_esx_portgroup }}'
#    --datastore='{{ target_esx_datastore }}'
#    --diskMode='{{ disk_mode }}'
#    --name="{{ item | replace('.ova','') | replace('-ovf','') }}"
#    '{{ network_mount_dir }}/{{ ova_path}}/{{ item }}'
#    vi://"{{ lookup('env', 'VMWARE_USER') | urlencode }}":"{{ lookup('env', 'VMWARE_PASSWORD') | urlencode }}"@"{{ lookup('env', 'VMWARE_HOST') }}":443/"{{ vcenter_datacenter }}"/host/"{{ vcenter_cluster }}"/
#  loop: "{{ ova_files }}"
#  when:
#    - ova_files is defined