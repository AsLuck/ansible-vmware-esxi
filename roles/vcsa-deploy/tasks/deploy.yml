---

- name: find ova file
  find:
    paths: '{{ network_mount_dir }}/images'
    patterns: 'VMware-vCenter-Server-Appliance-6.7.0*.ova'
  register: ova_file

- name: deploy appliance
  command: >
    {{ ovftool }}
    --acceptAllEulas
    --noSSLVerify
    --X:injectOvfEnv
    --allowExtraConfig
    --X:enableHiddenProperties
    --X:waitForIp
    --X:connectionFileTransferRetryCount=3
    --sourceType=OVA
    --powerOn
    --net:"Network 1"='{{ target_esx_portgroup }}'
    --datastore='{{ target_esx_datastore }}'
    --diskMode='{{ disk_mode }}'
    --deploymentOption="{{ vcenter_appliance_size }}"
    --prop:guestinfo.cis.appliance.root.shell=/bin/bash
    --prop:guestinfo.cis.deployment.autoconfig=True
    --prop:guestinfo.cis.silentinstall=False
    --prop:guestinfo.cis.vmdir.domain-name="{{ sso_domain_name }}"
    --prop:guestinfo.cis.vmdir.site-name="{{ sso_site_name }}"
    --prop:guestinfo.cis.vmdir.username="{{ vcenter_username }}"
    --prop:guestinfo.cis.vmdir.password="{{ sso_password }}"
    --prop:guestinfo.cis.appliance.net.addr.family="{{ net_addr_family }}"
    --prop:guestinfo.cis.appliance.root.passwd="{{ vcenter_password }}"
    --prop:guestinfo.cis.appliance.ssh.enabled="{{ ssh_enable }}"
    --prop:guestinfo.cis.vmdir.first-instance=True
    --prop:guestinfo.cis.ceip_enabled=True
    --prop:guestinfo.cis.appliance.ntp.servers='{% for item in ntp_servers %}{{ item }}{{ "," if not loop.last else "" }}{% endfor %}'
    {% if network_ip_scheme == "DHCP" %}
    --prop:guestinfo.cis.appliance.net.mode="dhcp"
    {% elif network_ip_scheme == "static" %}
    --name='{{ vcenter_appliance_name }}'
    --prop:guestinfo.cis.appliance.net.pnid="{{ vcenter_fqdn }}"
    --prop:guestinfo.cis.appliance.net.mode="static"
    --prop:guestinfo.cis.appliance.net.addr="{{ vcenter_ip_address | ipaddr }}"
    --prop:guestinfo.cis.appliance.net.prefix="{{ vcenter_net_prefix }}"
    --prop:guestinfo.cis.appliance.net.gateway="{{ vcenter_gateway | ipaddr }}"
    --prop:guestinfo.cis.appliance.net.dns.servers='{% for item in dns_servers %}{{ item }}{{ "," if not loop.last else "" }}{% endfor %}'
    {% endif %}
    '{{ ova_file.files[0].path }}'
    vi://"{{ ansible_user | default(ansible_ssh_user) | default('root') | urlencode }}":"{{ ansible_password | default(ansible_ssh_password) | urlencode }}"@{{ ansible_host }}/

- name: deploy appliance
  vmware_deploy_ovf:
    hostname: "{{ ansible_host }}"
    username: "{{ ansible_user | default(ansible_ssh_user) | default('root') }}"
    password: "{{ ansible_password | default(ansible_ssh_password) }}"
    ovf: '{{ ova_file.files[0].path }}'
    wait_for_ip_address: yes
    validate_certs: no
    name: '{{ vcenter_appliance_name }}'
    networks: '{"Network 1": "{{ target_esx_portgroup }}"}'
    datastore: '{{ target_esx_datastore }}'
    disk_provisioning: '{{ disk_mode }}'
    deployment_option: '{{ vcenter_appliance_size }}'
    properties:
      guestinfo.cis.appliance.root.shell: /bin/bash
      guestinfo.cis.deployment.autoconfig: True
      guestinfo.cis.silentinstall: False
      guestinfo.cis.vmdir.domain-name: "{{ sso_domain_name }}"
      guestinfo.cis.vmdir.site-name: "{{ sso_site_name }}"
      guestinfo.cis.vmdir.username: "{{ vcenter_username }}"
      guestinfo.cis.vmdir.password: "{{ sso_password }}"
      guestinfo.cis.appliance.net.addr.family: "{{ net_addr_family }}"
      guestinfo.cis.appliance.root.passwd: "{{ vcenter_password }}"
      guestinfo.cis.appliance.ssh.enabled: "{{ ssh_enable }}"
      guestinfo.cis.vmdir.first-instance: True
      guestinfo.cis.ceip_enabled: True
      guestinfo.cis.appliance.ntp.servers: '{% for item in ntp_servers %}{{ item }}{{ "," if not loop.last else "" }}{% endfor %}'
      guestinfo.cis.appliance.net.pnid: "{{ vcenter_fqdn }}"
      guestinfo.cis.appliance.net.mode: "{{ network_ip_scheme }}"
      guestinfo.cis.appliance.net.addr: "{{ vcenter_ip_address | ipaddr }}"
      guestinfo.cis.appliance.net.prefix: "{{ vcenter_net_prefix }}"
      guestinfo.cis.appliance.net.gateway: "{{ vcenter_gateway | ipaddr }}"
      guestinfo.cis.appliance.net.dns.servers: '{% for item in dns_servers %}{{ item }}{{ "," if not loop.last else "" }}{% endfor %}'
  delegate_to: localhost
  when:
    - ova_file is success
    - ova_file.matched is defined
    - ova_file.matched | int > 0
    - ova_file.files is defined